import streamlit as st
from dotenv import load_dotenv
import os
import google.generativeai as genai
from youtube_transcript_api import YouTubeTranscriptApi

# Load environment variables
load_dotenv()

# Configure Gemini API
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# Affiliate marketing tags
AFFILIATE_TAGS = {
    "google_cloud": "<affiliate-link>",
    "ai_tools": "<affiliate-link>"
}

# SEO and content generation prompt
prompt = """
рдЖрдк рдПрдХ рдХреБрд╢рд▓ рд▓реЗрдЦрдХ рд╣реИрдВ рдЬрд┐рдиреНрд╣реЗрдВ рдпреВрдЯреНрдпреВрдм рд╡реАрдбрд┐рдпреЛ рдЯреНрд░рд╛рдВрд╕рдХреНрд░рд┐рдкреНрдЯреНрд╕ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдмреНрд▓реЙрдЧ рд╕рд╛рдордЧреНрд░реА рддреИрдпрд╛рд░ рдХрд░рдиреЗ рдХрд╛ рдХрд╛рд░реНрдп рд╕реМрдВрдкрд╛ рдЧрдпрд╛ рд╣реИред 
рдЖрдкрдХрд╛ рд▓рдХреНрд╖реНрдп рд╡реАрдбрд┐рдпреЛ рдореЗрдВ рджреА рдЧрдИ рдореБрдЦреНрдп рдЬрд╛рдирдХрд╛рд░реА рдХреЛ рдЖрдХрд░реНрд╖рдХ рдФрд░ рд╕реВрдЪрдирд╛рддреНрдордХ рдмреНрд▓реЙрдЧ рдкреЛрд╕реНрдЯ рдореЗрдВ рдкрд░рд┐рд╡рд░реНрддрд┐рдд рдХрд░рдирд╛ рд╣реИред

рд╡рд┐рд╢реЗрд╖ рд░реВрдк рд╕реЗ:

1. **рдкреНрд░рджрд╛рди рдХрд┐рдП рдЧрдП рдЯреНрд░рд╛рдВрд╕рдХреНрд░рд┐рдкреНрдЯ рдЯреЗрдХреНрд╕реНрдЯ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдПрдХ рд╡рд┐рд╕реНрддреГрдд рдмреНрд▓реЙрдЧ рдкреЛрд╕реНрдЯ рддреИрдпрд╛рд░ рдХрд░реЗрдВред**
2. **рдмреНрд▓реЙрдЧ рдкреЛрд╕реНрдЯ рдХреЛ рдкреИрд░рд╛рдЧреНрд░рд╛рдл рдореЗрдВ рд▓рд┐рдЦреЗрдВ**, рдФрд░ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдпрд╣ рдкрдврд╝рдиреЗ рдореЗрдВ рдЖрд╕рд╛рди рдФрд░ рдЖрдХрд░реНрд╖рдХ рд╣реЛред
3. **рдмреНрд▓реЙрдЧ рдкреЛрд╕реНрдЯ рдХреЛ 500 рд╢рдмреНрджреЛрдВ рддрдХ рд╕реАрдорд┐рдд рд░рдЦреЗрдВред**
4. **рдкрд╛рдардХреЛрдВ рдХреЗ рд▓рд┐рдП рд╡реАрдбрд┐рдпреЛ рдХреА рд╕рд╛рдордЧреНрд░реА рдХреА рд╕рдВрднрд╛рд╡рд┐рдд рдкреНрд░рд╛рд╕рдВрдЧрд┐рдХрддрд╛ рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░реЗрдВред**
5. **рдкреНрд░рджрд╛рди рдХрд┐рдП рдЧрдП Google рдХреНрд▓рд╛рдЙрдб рдХрдВрд╕реЛрд▓ рдХреНрд░реЗрдбреЗрдВрд╢рд┐рдпрд▓реНрд╕ рдЫрд╡рд┐ рдХреЗ рд╕рдВрджрд░реНрдн рдореЗрдВ, рдпрджрд┐ рд╡реАрдбрд┐рдпреЛ рдХреНрд▓рд╛рдЙрдб рдХрдВрдкреНрдпреВрдЯрд┐рдВрдЧ, рдПрдЖрдИ рдпрд╛ рдкреНрд░реМрджреНрдпреЛрдЧрд┐рдХреА рд╕реЗ рд╕рдВрдмрдВрдзрд┐рдд рдХрд┐рд╕реА рднреА рд╡рд┐рд╖рдп рдкрд░ рдЪрд░реНрдЪрд╛ рдХрд░рддрд╛ рд╣реИ, рддреЛ рдХреГрдкрдпрд╛ рдЗрди рдкрд╣рд▓реБрдУрдВ рдХреЛ рдмреНрд▓реЙрдЧ рдкреЛрд╕реНрдЯ рдореЗрдВ рдЙрдЬрд╛рдЧрд░ рдХрд░реЗрдВред**
6. **рдпрджрд┐ рд╡реАрдбрд┐рдпреЛ рдореЗрдВ рдХрд┐рд╕реА рднреА рдЙрдкрдХрд░рдг, рд╕реЗрд╡рд╛рдУрдВ рдпрд╛ рдкреНрд▓реЗрдЯрдлрд╛рд░реНрдореЛрдВ (рдЬреИрд╕реЗ Google рдХреНрд▓рд╛рдЙрдб) рдХрд╛ рдЙрд▓реНрд▓реЗрдЦ рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ, рддреЛ рдХреГрдкрдпрд╛ рдЙрдиреНрд╣реЗрдВ рдмреНрд▓реЙрдЧ рдкреЛрд╕реНрдЯ рдореЗрдВ рд╢рд╛рдорд┐рд▓ рдХрд░реЗрдВ рдФрд░ рдЙрдирдХрд╛ рд╕рдВрдХреНрд╖рд┐рдкреНрдд рд╡рд┐рд╡рд░рдг рджреЗрдВред**
7. **рдмреНрд▓реЙрдЧ рдкреЛрд╕реНрдЯ рдХреЛ рд╣рд┐рдВрджреА рднрд╛рд╖рд╛ рдореЗрдВ рд▓рд┐рдЦреЗрдВ, рдФрд░ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдпрд╣ рд╣рд┐рдВрджреА рднрд╛рд╖реА рдкрд╛рдардХреЛрдВ рдХреЗ рд▓рд┐рдП рд╕рд╛рдВрд╕реНрдХреГрддрд┐рдХ рд░реВрдк рд╕реЗ рдкреНрд░рд╛рд╕рдВрдЧрд┐рдХ рд╣реЛред**
8. **рдмреНрд▓реЙрдЧ рдкреЛрд╕реНрдЯ рдореЗрдВ рдПрдХ рдЖрдХрд░реНрд╖рдХ рд╢реАрд░реНрд╖рдХ рдФрд░ рдЙрдкрд╢реАрд░реНрд╖рдХ рднреА рд╢рд╛рдорд┐рд▓ рдХрд░реЗрдВред**
9. **SEO рдХреЗ рд▓рд┐рдП -3 рдХреАрд╡рд░реНрдб рд╢рд╛рдорд┐рд▓ рдХрд░реЗрдВ рдФрд░ рдЙрдиреНрд╣реЗрдВ рдкреНрд░рд╛рдХреГрддрд┐рдХ рд░реВрдк рд╕реЗ рдкреЛрд╕реНрдЯ рдореЗрдВ рдПрдореНрдмреЗрдб рдХрд░реЗрдВред**
10. **рд╕рдВрдмрдВрдзрд┐рдд рддрдХрдиреАрдХреЛрдВ рдХреЗ рд▓рд┐рдП рдПрдлрд┐рд▓рд┐рдПрдЯ рд▓рд┐рдВрдХ рдЬреЛрдбрд╝реЗрдВ: {affiliate_tags}**
11. **AdSense рдХреЗ рд▓рд┐рдП рдкреНрд▓реЗрд╕рд╣реЛрд▓реНрдбрд░ DIVs рдЬреЛрдбрд╝реЗрдВ: <!-- ADSENSE_HEADER -->, <!-- ADSENSE_CONTENT -->, <!-- ADSENSE_FOOTER -->**
"""

# Function to extract YouTube transcript
def extract_transcript_details(youtube_video_url):
    try:
        video_id = youtube_video_url.split("=")[1]
        transcript_text = YouTubeTranscriptApi.get_transcript(video_id, languages=["hi"])
        transcript = " ".join([item["text"] for item in transcript_text])
        return transcript
    except Exception as e:
        st.error(f"Error extracting transcript: {e}")
        return None

# Function to generate blog content using Gemini
def generate_blog_content(transcript_text):
    try:
        model = genai.GenerativeModel("gemini-1.5-pro-latest")
        full_prompt = prompt.format(affiliate_tags=AFFILIATE_TAGS)
        response = model.generate_content(full_prompt + transcript_text)
        return response.text
    except Exception as e:
        st.error(f"Error generating blog content: {e}")
        return None

# Streamlit UI
st.title("YouTube to Blog Automation ЁЯЪА")
youtube_link = st.text_input("Enter YouTube Video Link:")

if youtube_link:
    try:
        video_id = youtube_link.split("=")[1]
        st.image(f"http://img.youtube.com/vi/{video_id}/0.jpg", use_column_width=True)
    except Exception as e:
        st.error(f"Error displaying video thumbnail: {e}")

if st.button("Generate & Publish Blog"):
    if not youtube_link:
        st.warning("Please enter a YouTube link.")
    else:
        with st.spinner("Extracting transcript..."):
            transcript = extract_transcript_details(youtube_link)
        
        if transcript:
            with st.spinner("Generating blog content..."):
                blog_content = generate_blog_content(transcript)
            
            if blog_content:
                st.success("Blog generated successfully!")
                st.markdown("### Blog Preview:")
                st.write(blog_content)
            else:
                st.error("Failed to generate blog content.")
        else:
            st.error("Failed to extract transcript.")